"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
from decouple import config  # For reading environment variables

import dj_database_url  # For database configuration from environment variables

# Load environment variables from a .env file


# Get the value of the SECRET_KEY environment variable

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='your-default-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    # installed apps
    # 'users',  # Custom user app for user management
    'photoshare',


    # Third-party apps
    'allauth',  # For authentication
    'allauth.account',  # For account management
    'allauth.socialaccount',  # For social authentication
    'allauth.socialaccount.providers.google',  # For Google social authentication

    'rest_framework', # For the API
    'rest_framework.authtoken',  # For token-based authentication
    'drf_yasg',  # For API documentation

    'django_filters',  # For filtering in DRF

    # 'storages',  # For handling file storage (e.g., AWS S3)


    'corsheaders', # For handling CORS (Cross-Origin Resource Sharing)

    'django_extensions',  # For development utilities
    # 'debug_toolbar',  # For debugging during development

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Custom middleware to update last login time
    # 'users.middleware.UpdateLastLoginMiddleware',

    # Settings for CORS
    'corsheaders.middleware.CorsMiddleware',

    # Settings for Debug Toolbar
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',

    # Settings for Allauth
    'allauth.account.middleware.AccountMiddleware',
    # 'allauth.socialaccount.middleware.SocialAccountMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


DATABASES["default"] = dj_database_url.parse(config("DATABASE_URL", default="sqlite:///db.sqlite3"))  # Use RENDER_EXTERNAL_DB_CONNECTION_URL for production, or default to SQLite in development. Conn_max_age is set to 600 seconds (10 minutes) for persistent connections.



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = os.getenv("STATIC_URL", default='/static/')
STATIC_ROOT = os.getenv("STATIC_ROOT", default=BASE_DIR / 'staticfiles')




# Setting up media files (user-uploaded content)
MEDIA_URL =  '/media/'
MEDIA_ROOT =  '/media/'


# if not os.path.exists(MEDIA_ROOT):
#     os.makedirs(MEDIA_ROOT)  # Ensure the media directory exists


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




####################################3 Custom Settings for this Project ########################################



# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'minimal': {
            'format': 'Date and Time: {asctime}\nLevel: {levelname}\nModule: {module}\nMessage: {message}\n',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'django.log'),
            'level': 'DEBUG',  # Set to DEBUG for development, change to INFO or WARNING in production
            'formatter': 'minimal',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 10,  # Keep 10 backup files
        }
    },
    'loggers': {
        # 'django': {
        #     'handlers': ['file'],
        #     'level': 'DEBUG',  # Set to DEBUG for development, change to INFO or WARNING in production
        #     'formatter': 'simple',
        # },   # this overrides the default django logger to log to file only
        'photoshare': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',  # Set to DEBUG for development, change to INFO or WARNING in production
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',  # Log errors in requests
            'propagate': True,
        },
    },
    'mail_admins': {
        'level': 'ERROR',  # Only send emails for errors
        'formatter': 'verbose',
        'filters': ['require_debug_false'],  # Only send emails if DEBUG is False
        'class': 'django.utils.log.AdminEmailHandler',
        'include_html': True,  # Include HTML in the email
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'DEBUG',  # Set to DEBUG for development, change to INFO or WARNING in production
    },
}


LOGS_DIR = BASE_DIR / 'logs'  # Directory for log files
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)
# Ensure the logs directory exists
LOGGING['handlers']['file']['filename'] = os.path.join(LOGS_DIR, 'photoshare.log')  # Set the log file path



# Default Authentications Settings
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # Allauth authentication backend
    'allauth.account.auth_backends.AuthenticationBackend',

]


# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',  # Allow read-only access to unauthenticated users
        'rest_framework.permissions.IsAuthenticated',  # Require authentication for write operations
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',  # Enable filtering
    ),

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # Use page number pagination
    'PAGE_SIZE': 10,  # Default page size for pagination


    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.AnonRateThrottle',
    #     'rest_framework.throttling.UserRateThrottle'
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '100/day',  # For anonymous users
    #     'user': '1000/day' # For authenticated users
}



# CORS settings
# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:3000',  # Allow local development server
#     'http://127.0.0.1:3000',  # Allow local development server
# ]

CORS_ALLOW_ALL_ORIGINS = True


# DRF-YASG settings for API documentation
SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,  # Disable session authentication for Swagger
    'SECURITY_DEFINITIONS': {
        'Token': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
        },
    },
    'DEFAULT_SCHEMA_CLASS': 'drf_yasg.inspectors.SwaggerAutoSchema',  # Use drf_yasg for API documentation
}
SCHEMA_CONFIG = {
    'TITLE': 'Photoshare API',
    'DESCRIPTION': 'API documentation for the Photoshare application',
    'VERSION': '1.0.0',
    'CONTACT': {
        'name': 'Photoshare Support',
        'email': 'support@photoshare.com',
    },
    # 'PERMISSIONS': [permissions.AllowAny],
    'PUBLIC': True,
}


# Allauth settings

SITE_ID = 1

ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_LOGIN_METHODS = {'username', 'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*'] # To make email and username required during signup
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False

ACCOUNT_EMAIL_SUBJECT_PREFIX = '[Photoshare] '

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_REDIRECT_URL = '/accounts/login/'



# Email Configuration
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
ACCOUNT_EMAIL_CONFIRMATION_HMAC = True
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http'